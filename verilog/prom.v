//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// Wed Apr 13 2022 19:51:22
//
//      Input file      : 
//      Component name  : prom
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------

// Asynchronous implementation of the bipolar PROM used to decode some of the sync signals
// This PROM data is used in several Kee and Atari games. Combinatorial logic uses no block 
// RAM and is vendor agnostic

module prom(
    address,
    data
);
    input [7:0]      address;
    output reg [3:0] data;
    
    
    
    always @(address)
        case (address)
            8'b01111111 :
                data <= 4'b1000;
            8'b10000000 :
                data <= 4'b1010;
            8'b10000001 :
                data <= 4'b1010;
            8'b10000010 :
                data <= 4'b1010;
            8'b10000011 :
                data <= 4'b1010;
            8'b10000100 :
                data <= 4'b1010;
            8'b10000101 :
                data <= 4'b1110;
            8'b11100000 :
                data <= 4'b1000;
            8'b11100001 :
                data <= 4'b1000;
            8'b11100010 :
                data <= 4'b1000;
            8'b11100011 :
                data <= 4'b1000;
            8'b11100100 :
                data <= 4'b1000;
            8'b11100101 :
                data <= 4'b1000;
            8'b11100110 :
                data <= 4'b1000;
            8'b11100111 :
                data <= 4'b1000;
            8'b11101000 :
                data <= 4'b1000;
            8'b11101001 :
                data <= 4'b1000;
            8'b11101010 :
                data <= 4'b1000;
            8'b11101011 :
                data <= 4'b1000;
            8'b11101100 :
                data <= 4'b1000;
            8'b11101101 :
                data <= 4'b1000;
            8'b11101110 :
                data <= 4'b1000;
            8'b11101111 :
                data <= 4'b1010;
            8'b11110000 :
                data <= 4'b1010;
            8'b11110001 :
                data <= 4'b1010;
            8'b11110010 :
                data <= 4'b1011;
            8'b11110011 :
                data <= 4'b1011;
            8'b11110100 :
                data <= 4'b1011;
            8'b11110101 :
                data <= 4'b1010;
            8'b11110110 :
                data <= 4'b1010;
            8'b11110111 :
                data <= 4'b1010;
            8'b11111000 :
                data <= 4'b1010;
            8'b11111001 :
                data <= 4'b1010;
            8'b11111010 :
                data <= 4'b1010;
            8'b11111011 :
                data <= 4'b1010;
            8'b11111100 :
                data <= 4'b1010;
            8'b11111101 :
                data <= 4'b1010;
            8'b11111110 :
                data <= 4'b1010;
            8'b11111111 :
                data <= 4'b1010;
            default :
                data <= 4'b0000;
        endcase
    
endmodule
